package com.capgemini.bankapp.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.capgemini.bankapp.exception.LowBalanceException;
import com.capgemini.bankapp.model.BankAccount;
import com.capgemini.bankapp.service.BankAccountNotFoundException;
import com.capgemini.bankapp.service.BankAccountService;
import com.capgemini.bankapp.service.impl.BankAccountServiceImpl;
import com.capgemini.bankapp.util.DbUtil;

import com.capgemini.bankapp.exception.LowBalanceException;
import com.capgemini.bankapp.model.BankAccount;
import com.capgemini.bankapp.service.BankAccountNotFoundException;
import com.capgemini.bankapp.service.BankAccountService;
import com.capgemini.bankapp.service.impl.BankAccountServiceImpl;
import com.capgemini.bankapp.util.DbUtil;

/**
 * Servlet implementation class BankAppController
 */
@WebServlet(urlPatterns = ("*.do"), loadOnStartup=1)
public class BankAppController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       private BankAccountService bankService;
       static final Logger logger = Logger.getLogger(DbUtil.class);

    
    public BankAppController() {
      bankService=new BankAccountServiceImpl();
        // TODO Auto-generated constructor stub
    }


	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//response.getWriter().append("Served at: ").append(request.getContextPath());
		response.setContentType("text/html");
		String path=request.getServletPath();
		if(path.equals("/getAllBankAccounts.do")) {
			List<BankAccount> bankAccounts=bankService.findAllBankAccounts();
			RequestDispatcher dispatcher=request.getRequestDispatcher("DisplayAllACcounts.jsp");
			request.setAttribute("accounts", bankAccounts);
			dispatcher.forward(request, response);
		
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		PrintWriter out=response.getWriter();
		String path=request.getServletPath();
		System.out.println(path);
		if(path.equals("/addNewBankAccount.do")) {
			String accountHolderName=request.getParameter("accountHolderName");
			String accountType=request.getParameter("accountType");
			double accontBalance=Double.parseDouble(request.getParameter("accountBalance"));
			BankAccount account=new BankAccount(accountHolderName,accountType,accontBalance);
			if(bankService.addNewBankAccount(account)) {
			
				out.println("<h2>Bank account is created successfully......</h2>");
				out.println("<h2><a href='index.html'>[Home]</h2>");
				out.close();
			}
		}
		 if(path.equals("/deleteAccount.do")) {
			long accountid=Long.parseLong(request.getParameter("accountid"));
		
				try {
					if(bankService.deleteBankAccount(accountid)) {
					out.println("<h2>deleted Successfully....</h2>");
					}
				} catch (BankAccountNotFoundException e) {
					logger.error(e);
				}
		 }
				 if(path.equals("/New_withdraw.do")) {
						long accountid=Long.parseLong(request.getParameter("accountid"));
						double amount=Double.parseDouble(request.getParameter("amount"));
						try {
								double balance = bankService.withdraw(accountid, amount); 
								out.println("<h2>successfully done......</h2>"+balance);
								out.close();

							
						} catch (LowBalanceException | BankAccountNotFoundException e) {
							// TODO Auto-generated catch block
							logger.error(e);
						}
		 }
				 if(path.equals("/New-Deposit.do")) {
					 long accountNumber=Long.parseLong(request.getParameter("accountNumber"));
						double amount=Double.parseDouble(request.getParameter("amount"));
						try {
							double balance = bankService.deposit(accountNumber, amount) ;
							out.println("<h2>successfully done......</h2>"+balance);
							out.close();

						} catch (BankAccountNotFoundException e) {
							logger.error(e);

						}
						
				 }
				 if(path.equals("/CheckBalance.do")) {
					 long accountid=Long.parseLong(request.getParameter("accountid"));
					 	try {
							double balance=bankService.checkBalance(accountid);
							out.println("<h2>successfully done......</h2>"+balance);
							out.close();

						} catch (BankAccountNotFoundException e) {
							// TODO Auto-generated catch block
							logger.error(e);

						}
				 }
				 if(path.equals("/Newfund_Transfer.do")) {
					 long fromAccount=Long.parseLong(request.getParameter("fromAccount"));
					 long toAccount=Long.parseLong(request.getParameter("toAccount"));
						double amount=Double.parseDouble(request.getParameter("amount"));
							try {
								double balance=bankService.fundTransfer(fromAccount, toAccount, amount);
								out.println("<h2>successfully done......</h2>"+balance);
								out.close();
							} catch (LowBalanceException | BankAccountNotFoundException e) {
								
								logger.error(e);

							}
				 }
				 if(path.equals("/SearchAccount.do")) {
					 long accountid=Long.parseLong(request.getParameter("accountid"));
					 List<BankAccount> account;
					try {
						account= bankService.serachBankAccount(accountid);
						BankAccount account1=account.get(0);
						RequestDispatcher dispatcher=request.getRequestDispatcher("searchAccount.jsp");
						request.setAttribute("accounts", account1);
						dispatcher.forward(request, response);
						
						
					} catch (BankAccountNotFoundException e) {
					
						logger.error(e);
					}
				 }
					if(path.equals("/search.do")) {
						long accountid=Long.parseLong(request.getParameter("accountid"));
						 List<BankAccount> account;
						try {
							account= bankService.serachBankAccount(accountid);
							BankAccount account1=account.get(0);
							RequestDispatcher dispatcher=request.getRequestDispatcher("AccountInfo.jsp");
							request.setAttribute("accountDetails", account1);
							dispatcher.forward(request, response);
							
							
						} catch (BankAccountNotFoundException e) {
						
							logger.error(e);
						}
					}
			
			  if(path.equals("/updateAccount.do")) {
				  long accountid=Long.parseLong(request.getParameter("accountid"));
				  String accountHolderName=request.getParameter("accountHolderName");
					String accountType=request.getParameter("accountType");
					double accontBalance=Double.parseDouble(request.getParameter("accountBalance"));
					BankAccount account=new BankAccount(accountid,accountHolderName,accountType,accontBalance);
					boolean result =	bankService.updateBankDetails(accountid,accountHolderName,accountType);
			  }
			 
				 }	
		}
		
	



